// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: movies.sql

package database

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (title, year, runtime, genres) 
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, title, year, runtime, genres, version
`

type CreateMovieParams struct {
	Title   string   `json:"title"`
	Year    int64    `json:"year"`
	Runtime int64    `json:"runtime"`
	Genres  []string `json:"genres"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.Title,
		arg.Year,
		arg.Runtime,
		pq.Array(arg.Genres),
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Year,
		&i.Runtime,
		pq.Array(&i.Genres),
		&i.Version,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :execrows
DELETE FROM movies
WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteMovie, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getMovieById = `-- name: GetMovieById :one
SELECT id, created_at, title, year, runtime, genres, version FROM movies
WHERE id = $1
`

func (q *Queries) GetMovieById(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovieById, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Year,
		&i.Runtime,
		pq.Array(&i.Genres),
		&i.Version,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT count(*) OVER(), id, created_at, title, year, runtime, genres, version
FROM movies
WHERE (to_tsvector('simple', title) @@ plainto_tsquery('simple', $1) OR $1 = '')
AND (genres @> $2 OR $2 = '{}')
ORDER BY title ASC, id ASC
LIMIT $4 OFFSET $3
`

type ListMoviesParams struct {
	Title       string   `json:"title"`
	Genres      []string `json:"genres"`
	OffsetValue int32    `json:"offset_value"`
	LimitValue  int32    `json:"limit_value"`
}

type ListMoviesRow struct {
	Count     int64     `json:"count"`
	ID        int64     `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	Title     string    `json:"title"`
	Year      int64     `json:"year"`
	Runtime   int64     `json:"runtime"`
	Genres    []string  `json:"genres"`
	Version   int64     `json:"version"`
}

func (q *Queries) ListMovies(ctx context.Context, arg ListMoviesParams) ([]ListMoviesRow, error) {
	rows, err := q.db.QueryContext(ctx, listMovies,
		arg.Title,
		pq.Array(arg.Genres),
		arg.OffsetValue,
		arg.LimitValue,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMoviesRow
	for rows.Next() {
		var i ListMoviesRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.CreatedAt,
			&i.Title,
			&i.Year,
			&i.Runtime,
			pq.Array(&i.Genres),
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET title = $2, year = $3, runtime = $4, genres = $5, version = version + 1
WHERE id = $1 and version = $6
RETURNING id, created_at, title, year, runtime, genres, version
`

type UpdateMovieParams struct {
	ID      int64    `json:"id"`
	Title   string   `json:"title"`
	Year    int64    `json:"year"`
	Runtime int64    `json:"runtime"`
	Genres  []string `json:"genres"`
	Version int64    `json:"version"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, updateMovie,
		arg.ID,
		arg.Title,
		arg.Year,
		arg.Runtime,
		pq.Array(arg.Genres),
		arg.Version,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Year,
		&i.Runtime,
		pq.Array(&i.Genres),
		&i.Version,
	)
	return i, err
}
